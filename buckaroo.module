<?php

/**
 * @file
 *   buckaroo.module
 *   Payment gateway for Buckaroo
 * @developers:
 *    Gabor Szanto <hello@szantogabor.com>
 *    http://szantogabor.com
 *
 */

/**
 * Implementation of hook_init().
 */
function buckaroo_init() {
  $post = $GLOBALS['_POST'];

  if (!empty($post['bpe_result'])) {
    $error_codes = _buckaroo_get_error_codes();
    if ($error_codes[$post['bpe_result']]) {
      $status = $error_codes[$post['bpe_result']]['error_level'];
      //Change 'success' to drupal_set_message default status
      if ($status == 'success') {
        $status = 'status' ;
      }
      drupal_set_message($error_codes[$post['bpe_result']]['message'], $status);
    }
  }
  dsm(get_defined_vars());
}
/**
 * Implements of hook_perm().
 *
 * @return array An array of valid permissions for the buckaroo module
 */
function buckaroo_permission() {
  return array(
    'administer buckaroo' => array(
      'title' => t('Administer Buckaroo'),
      'description' => t('Administer buckaroo'),
    ),
    'access buckaroo' => array(
      'title' => t('Access Buckaroo payment form'),
    ),
  );
}
/**
 * Implemens hook_menu().
 *
 * @return An array of menu items.
 */
function buckaroo_menu() {
  $items = array();

  $items['admin/config/buckaroo'] = array(
    'title' => 'Buckaroo',
    'description' => 'Settings for Buckaroo payment gateway.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('buckaroo_admin_form'),
    'access arguments' => array('administer buckaroo'),
    'file' => 'includes/buckaroo.admin.inc',
  );

  $buckaroo_menu = variable_get('BPE_path', 'buckaroo');

  if (substr($buckaroo_menu, 0, 4) != 'node') {
    $items[$buckaroo_menu] = array(
      'title' => 'Buckaroo payment page',
      'page callback' => 'theme',
      'page arguments' => array('buckaroo_payment_form'),
      'access arguments' => array('access buckaroo'),
      'file' => 'includes/buckaroo.form.inc',
    );
  }

//  if (!menu_get_item($buckaroo_menu)) {
//
//  }

  return $items;
}

function buckaroo_form_alter(&$form, $form_state, $form_id) {
  //dsm($form_id);
}

/*
 * Implements hook_form_FORM_ID_alter
 * Need to alter our admin form, because our submit function need to run last
 */
function buckaroo_form_buckaroo_admin_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'buckaroo_admin_form_submit';
}

/**
 * Get all payment methods, it's names and it's enabled or not
 * @return array
 *   And array of predefined payment methods
 */
function buckaroo_get_payment_methods() {
  $defaults = array(
    'cc' => array(
      'name'=> 'Credit cards',
     ),
    'ideal' => array(
      'name'=> 'iDEAL',
     ),
    'gp' => array(
      'name'=> 'Giropay',
     ),
    'pp' => array(
      'name'=> 'PayPal',
     ),
    'oodb' => array(
      'name'=> 'Once-only and continuous direct debits',
     ),
   );
  foreach ($defaults as $key => &$value) {
    $value['enabled'] = buckaroo_get_enabled($key) ;
  }
  return $defaults;
}

function buckaroo_get_enabled($machine_name) {
  return variable_get("BPE_{$machine_name}_enabled", 0);
}

/**
 * Get all Buckaroo variables
 * @return array
 *   An array of all variables defined by this module
 */
function buckaroo_variable_get() {
  $vars = array(
    'path' => variable_get('BPE_path', 'buckaroo'),
    'merchant_key' => variable_get('BPE_Merchant', ''),
    'secret_key' => variable_get('BPE_SecretKey', ''),
    'amount_title' => variable_get('BPE_amount_title', 'Choose an ammount'),
    'amount_values' => variable_get('BPE_amount_values', array('5', '10')),
    'currency' => variable_get('BPE_Currency', 'EUR'),
    'unique_amount' => variable_get('BPE_unique_amount', ''),
    'method_title' => variable_get('BPE_method_title', 'Choose your payment method'),
    'civi_profile' => variable_get('BPE_civi_profile', 'none'),
    'civi_position' => variable_get('BPE_civi_position', 0),
    'mode' => variable_get('BPE_Mode', 0),
  );
  $vars += buckaroo_get_payment_methods();
  return $vars;
}

/**
 * Implements hook_theme
 * @param type $existing
 * @param type $type
 * @param type $theme
 * @param type $path
 * @return type
 */
function buckaroo_theme($existing, $type, $theme, $path) {
  if($type == 'module') {
    return array(
      'buckaroo_payment_form' => array(
        'template' => 'buckaroo-form',
        'path' => drupal_get_path('module', 'buckaroo') . '/theme',
      ),
    );
  }
  return array(); //will raise fatal error if void
}

/**
 * Preprocess function to create variables for buckaroo-form.tpl.php
 * @param array $vars
 *
 */
function buckaroo_preprocess_buckaroo_payment_form(&$vars) {
  module_load_include('inc', 'buckaroo', 'includes/buckaroo.form');
  $methods = buckaroo_get_payment_methods() ;
  $vars += buckaroo_variable_get();
  $vars += array(
    'amount_form' => drupal_get_form('buckaroo_amount_form'),
  );

  foreach ($methods as $key => $method) {
    if ($method['enabled'] && function_exists("buckaroo_{$key}_form")) {
      $vars['method_forms'][$key] = drupal_get_form("buckaroo_{$key}_form");
    }
  }
  $vars += array('crm_form' => drupal_get_form('buckaroo_crm_form'));
}

function buckaroo_create_signature($machine_name) {
  $vars = buckaroo_variable_get();
  $ammount = isset($_GET['default_amount']) ? $_GET['default_amount'] * 100 : $vars['amount_values'][0] * 100;
  $string = $vars['merchant_key'] . buckaroo_create_invoice() .$ammount . $vars['currency'] . $vars['mode'] . $vars['secret_key'];
  return md5($string);
}

function buckaroo_create_invoice() {
  $invoice = &drupal_static(__FUNCTION__, "panparks-" . time());
  return $invoice;
}

function buckaroo_xmlrpc($form, $form_state) {
  // First define the endpoint of the XML-RPC service, in this case is our
  // own server.
  $server = url('https://payment.buckaroo.nl/xml/request_for_authorization_mpi.asp', array('external' => TRUE));
  // Then we should define the method to call. xmlrpc() requires that all the
  // information related to the called method is passed as an array in the form
  // of 'method_name' => arguments_array
  $options = array(
    'xmlrpc_example.add' => array(
      (int) $form_state['values']['num1'],
      (int) $form_state['values']['num2'],
    ),
  );
  // Make the xmlrpc request and process the results.
  $result = xmlrpc($server, $options);
  if ($result === FALSE) {
    drupal_set_message(
      t('Error return from xmlrpc(): Error: @errno, Message: @message',
      array('@errno' => xmlrpc_errno(), '@message' => xmlrpc_error_msg())),
      'error'
    );
  }
  else {
    drupal_set_message(
      t('The XML-RPC server returned this response: @response',
      array('@response' => print_r($result, TRUE)))
    );
  }
}

/**
 * Helper function to read statuscodes.csv
 *
 * @return array
 */
function _buckaroo_get_error_codes() {
  $file = drupal_get_path('module', 'buckaroo') . '/statuscodes.csv';

  $header = array('status_code', 'message', 'error_level');;
  $data = array();
  $csvData = str_getcsv($file, "\n");

  foreach ($csvData as $csvLine) {
      $items = explode(';', $csvLine);
      for ($n = 0, $m = count($header); $n < $m; $n++) {
        $prepareData[$header[$n]] = $items[$n];
      }
      $data[$prepareData['status_code']] = $prepareData;
  }
  return $data;
}

/**
 * Parse
 *
 * @param type $input
 * @param type $delimiter
 * @return type
 */
function _buckaroo_csv_to_array($input, $delimiter=',') {

}