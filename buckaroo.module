<?php

/**
 * @file
 *   buckaroo.module
 *   Payment gateway for Buckaroo
 * @developers:
 *    Gabor Szanto <hello@szantogabor.com>
 *    http://szantogabor.com
 *
 */

/**
 * Implementation of hook_init().
 */
function buckaroo_init() {
  // The buckaroo send data back via post or get method based on payment method.
  // We need to figure out, in which way get data;
  $post = $GLOBALS['_POST'];
  if (empty($post['bpe_result'])) {
    $post = $GLOBALS['_GET'];
  }
  $test = url('test', array('query' => $post));
  if (!empty($post['bpe_result'])) {
    module_load_include('inc', 'buckaroo', 'includes/buckaroo.error');
    $error_codes = buckaroo_error_codes();
    $vars = buckaroo_variable_get();
    if ($error_codes[$post['bpe_result']]) {
      $status = $error_codes[$post['bpe_result']]['error_level'];
      //Change 'success' to drupal_set_message default status
      if ($status == 'success') {
        $status = 'status' ;
      }

      if ($vars['show_result'] > 0) {
        drupal_set_message($error_codes[$post['bpe_result']]['message'], $status);
      }
    }
    // CiviCRM integration
    if (module_exists('civi_api') && $status == 'status') {
      $civi_config = civi_get_config();
      if ($contacts = civi_contact_load_by_email($post['email-Primary'])) {
        $contact = reset($contacts);
        $contact_id = $contact->contact_id;
      }
      else {
        //@todo: This is not flexible, need to find a way to pass this values
        // to civicrm like a profile submit.
        $contact = new stdClass();
        $contact->email = $post['email-Primary'];
        $contact->first_name = $post['first_name'];
        $contact->last_name = $post['last_name'];
        $contact->birth_date = $post['birth_date'];
        $contact->prefix_id = $post['individual_prefix'];
        $contact->contact_type = 'Individual';
        $contact->address['default'] = array(
          'postal_code' => $post['postal_code-Primary'],
          'street_address' => $post['address_name-Primary'],
          'city' => $post['city-Primary'],
          'country_id' => $post['country-Primary'],
        );
        $saved = civi_contact_save($contact);
        if (!empty($saved['values'])) {
          $contact_id = $saved['id'];
        }
      }

      //Check if CiviContribute is enabled
      if (in_array('CiviContribute', $civi_config->enableComponents)) {
          $types = civi_get_contribution_types();
          $contribution = new stdClass();
          $contribution->total_amount = $post['bpe_amount'] / 100;
          $contribution->contact_id = $contact_id;
          $contribution->contribution_status_id = 1;
          $contribution->contribution_type_id = 1;
          $contribution->source = 'Buckaroo payment form';
          civi_contribution_save($contribution);
      }
    }
  }
}

/**
 * Implements of hook_perm().
 *
 * @return array An array of valid permissions for the buckaroo module
 */
function buckaroo_permission() {
  return array(
    'administer buckaroo' => array(
      'title' => t('Administer Buckaroo'),
      'description' => t('Administer buckaroo'),
    ),
    'access buckaroo' => array(
      'title' => t('Access Buckaroo payment form'),
    ),
  );
}
/**
 * Implemens hook_menu().
 *
 * @return An array of menu items.
 */
function buckaroo_menu() {
  $items = array();

  $items['admin/config/buckaroo'] = array(
    'title' => 'Buckaroo',
    'description' => 'Settings for Buckaroo payment gateway.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('buckaroo_admin_form'),
    'access arguments' => array('administer buckaroo'),
    'file' => 'includes/buckaroo.admin.inc',
  );

  //Because of buckaroo system never enable to pass parameters without form action. Therefore always need a drupal
  //confirmation page to prevent skipping drupal form validation.
  $items['buckaroo/confirm'] = array(
    'title' => 'Confirm',
    'description' => 'Confirmation page before post  to buckaroo',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('buckaroo_confirm_form'),
    'access arguments' => array('access buckaroo'),
    'file' => 'includes/buckaroo.confirm.inc',
  );

  $items['buckaroo/get-signature'] = array(
    'title' => 'Confirm',
    'page callback' => 'buckaroo_get_signature',
    'access arguments' => array('access buckaroo'),
    'type' => MENU_CALLBACK,
  );

  $buckaroo_menu = variable_get('BPE_path', 'buckaroo');

  if (substr($buckaroo_menu, 0, 4) != 'node') {
    $items[$buckaroo_menu] = array(
      'title' => 'Buckaroo payment page',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('buckaroo_payment_form'),
      'access arguments' => array('access buckaroo'),
      'file' => 'includes/buckaroo.form.inc',
    );
  }

  return $items;
}

function buckaroo_form_alter(&$form, $form_state, $form_id) {
  //dsm($form_id);
}

/*
 * Implements hook_node_view.
 */
function buckaroo_node_view($node, $view_mode, $langcode) {
  $buckaroo_menu = variable_get('BPE_path', 'buckaroo');
  if (substr($buckaroo_menu, 0, 4) == 'node' && substr($buckaroo_menu, 5) == $node->nid && user_access('access buckaroo')) {
    module_load_include('inc', 'buckaroo', 'includes/buckaroo.form');
    //@todo: This is not so perfect to add rendered form direct into the node body, but if ds layout is set to node,
    //can't find better way to display the form.
    $node->content['body'][0]['#markup'] .= drupal_render(drupal_get_form('buckaroo_payment_form'));
  }
}

/*
 * Implements hook_form_FORM_ID_alter
 * Need to alter our admin form, because our submit function need to run last
 */
function buckaroo_form_buckaroo_admin_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'buckaroo_admin_form_submit';
}

/**
 * Implements hook_requirements
 */
function buckaroo_requirements($phase) {
  $requirements = array();
  $vars = buckaroo_variable_get();

  if ($phase == 'runtime') {
    // Report if civi_api moduled is disabled when civiprofile is turned on.
    if (!module_exists('civi_api') && !empty($vars['civi_profile'])) {
      $requirements['buckaroo_civiapi'] = array(
        'title' => t('Buckaroo'),
        'value' => t('The civicrm support for Buckaroo gateway is turned on, but the module civi_api is not enabled!'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else {
      $requirements['buckaroo_civiapi'] = array(
        'title' => t('Buckaroo civi_api'),
        'value' => t('The civi_api module is enabled for Buckaroo.'),
        'severity' => REQUIREMENT_OK,
      );
    }
    // Report if civicrm moduled is disabled when civiprofile is turned on.
    if (!module_exists('civicrm') && !empty($vars['civi_profile'])) {
      $requirements['buckaroo_civicrm'] = array(
        'title' => t('Buckaroo'),
        'value' => t('The civicrm support for Buckaroo gateway is turned on, but the module civicrm is not enabled!'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else {
      $requirements['buckaroo_civicrm'] = array(
        'title' => t('Buckaroo civicrm'),
        'value' => t('The civicrm module is enabled for Buckaroo.'),
        'severity' => REQUIREMENT_OK,
      );
    }
  }
  return $requirements;
}

/**
 * Get all payment methods, it's names and it's enabled or not
 * @todo: make this configurable
 * @return array
 *   And array of predefined payment methods
 */
function buckaroo_get_payment_methods() {
  $defaults = &drupal_static(__FUNCTION__);

  if (isset($defaults)) {
    return $defaults;
  }

  $defaults = array(
    'cc' => array(
      'name'=> 'Credit cards',
      'description' => t('You will be redirected to a Credit Card placeholder to complete the payment.'),
      'action' => 'https://payment.buckaroo.nl/sslplus/request_for_authorization.asp',
     ),
    'ideal' => array(
      'name'=> t('iDEAL'),
      'description' => t('You will be redirected to the iDEAL system to complete the payment.'),
      'action' => 'https://payment.buckaroo.nl/gateway/ideal_payment.asp',
     ),
    'gp' => array(
      'name'=> t('Giropay'),
     ),
    'pp' => array(
      'name'=> t('PayPal'),
      'description' => t('Pay using your PayPal account. You will be redirected to the PayPal system to complete the payment.'),
      'action' => 'https://payment.buckaroo.nl/gateway/paypal_payment.asp',
     ),
    'oodb' => array(
      'name'=> t('Once-only and continuous direct debits'),
     ),
   );
  foreach ($defaults as $key => &$value) {
    $value['enabled'] = buckaroo_get_enabled($key) ;
  }
  return $defaults;
}

function buckaroo_get_enabled($machine_name) {
  return variable_get("BPE_{$machine_name}_enabled", 0);
}

/**
 * Get all Buckaroo variables
 * @return array
 *   An array of all variables defined by this module
 */
function buckaroo_variable_get() {
  global $base_url;
  $vars = array(
    'path' => variable_get('BPE_path', 'buckaroo'),
    'success_path' => variable_get('BPE_success_path', ''),
    'error_path' => variable_get('BPE_error_path', ''),
    'merchant_key' => variable_get('BPE_Merchant', ''),
    'secret_key' => variable_get('BPE_SecretKey', ''),
    'description' => variable_get('BPE_Description', ''),
    'amount_title' => variable_get('BPE_amount_title', 'Choose an ammount'),
    'amount_values' => variable_get('BPE_amount_values', array('5', '10')),
    'currency' => variable_get('BPE_Currency', 'EUR'),
    'minimum' => variable_get('BPE_minimum', ''),
    'unique_amount' => variable_get('BPE_unique_amount', ''),
    'method_title' => variable_get('BPE_method_title', 'Choose your payment method'),
    'civi_title' => variable_get('BPE_civi_title', 'Enter your details'),
    'civi_profile' => variable_get('BPE_civi_profile', 'none'),
    'civi_position' => variable_get('BPE_civi_position', 0),
    'mode' => variable_get('BPE_Mode', 0),
    'show_result' => variable_get('BPE_show_result', 0),
  );
  $vars += buckaroo_get_payment_methods();
  return $vars;
}

function buckaroo_get_signature() {
  drupal_json_output(buckaroo_create_signature());
}

function buckaroo_create_signature() {
  $vars = buckaroo_variable_get();
  $amount = isset($_GET['BPE_Amount']) ? $_GET['BPE_Amount'] * 100 : $vars['amount_values'][0] * 100;
  $invoice = isset($_GET['BPE_Invoice']) ? $_GET['BPE_Invoice'] : buckaroo_create_invoice();
  $string = $vars['merchant_key'] . $invoice . $amount . $vars['currency'] . $vars['mode'] . $vars['secret_key'];
  return md5($string);
}

function buckaroo_create_invoice() {
  $invoice = &drupal_static(__FUNCTION__, "panparks-" . time());
  return $invoice;
}

/**
 * Get settings for Drupal.settings js.
 *
 * @return
 *  an array of settings
 */
function _buckaroo_js_settings() {
  $settings = buckaroo_get_payment_methods();
  foreach ($settings as $key => $value) {
    if ($value['enabled'] != 1) {
      unset($settings[$key]);
    }
  }
  return $settings;
}

function buckaroo_get_hidden_elements($machine_name = NULL) {
  $vars = buckaroo_variable_get();
  //Look at BPE_Return_Method
  $need_post_method = array('pp', 'ideal');
  $return = array();

  global $base_url;
  $path = $base_url . '/buckaroo';

  $elements = array(
    //The merchant key you received from Buckaroo. This code ensures that the transaction is credited to your
    //account. If you have more than one website, you will have received several unique merchant keys:
    //one for each website. *
    'BPE_Merchant' => array(
      '#type' => 'hidden',
      '#value' => $vars['merchant_key'],
      'used' => array (
        'all'
      )
    ),
    //The transaction amount in cents. *
    'BPE_Amount' => array(
      '#type' => 'hidden',
      '#value' => is_numeric($_GET['uniqueamount']) ? $_GET['uniqueamount'] * 100 : $_GET['value'] * 100,
      'used' => array (
        'all'
      )
    ),
    //The code for the currency in which the transaction is to be made. *
    'BPE_Currency' => array(
      '#type' => 'hidden',
      //Ideal only supports EUR
      '#value' => $machine_name == 'ideal' ? 'EUR' : $vars['currency'],
      'used' => array (
        'all'
      )
    ),
    //The code of the preselected bank in this field. If this value is specified, Buckaroo‟s selection creen will not appear. Your customer will be redirected to the bank‟s screen instead.
    //tmp diabled
//    'BPE_Issuer' => array(
//      '#type' => 'hidden',
//      '#value' => '',
//      'used' => array (
//        'ideal'
//      )
//    ),
    //short transaction description.
    'BPE_Description' => array(
      '#type' => 'hidden',
      '#value' => $vars['description'],
      'used' => array (
        'all'
      )
    ),
    //Language code for the user interface language:NL = Dutch EN = English;
    'BPE_Language' => array(
      '#type' => 'hidden',
      '#value' => 'EN',
      'used' => array (
        'all'
      )
    ),
    //Parameter mode: 0 = full processing 1 = test mode
    'BPE_Mode' => array(
      '#type' => 'hidden',
      '#value' => $vars['mode'],
      'used' => array (
        'all'
      )
    ),
    //The digital signature to authenticate your website as sender. *
    'BPE_Signature2' => array(
      '#type' => 'hidden',
      '#value' =>  buckaroo_create_signature($machine_name),
      'used' => array (
        'all'
      )
    ),
    //Specify a different URL for the return page for successful payments.
    'BPE_Return_Success' => array(
      '#type' => 'hidden',
      '#value' => url($vars['success_path'], array('absolute' => TRUE)),
      'used' => array (
        'all'
      )
    ),
    //Specify a different URL for the return page for payments rejected by PayPal (processor).
    'BPE_Return_Reject' => array(
      '#type' => 'hidden',
      '#value' => url($vars['error_path'], array('absolute' => TRUE)),
      'used' => array (
        'all'
      )
    ),
    //Specify a different URL for the return page for payments that cannot be processed due to a technical malfunction.
    'BPE_Return_Error' => array(
      '#type' => 'hidden',
      '#value' => url($vars['error_path'], array('absolute' => TRUE)),
      'used' => array (
        'all'
      )
    ),
    //Specify how result parameters should be passed to your response pages:
    'BPE_Return_Method' => array(
      '#type' => 'hidden',
      '#value' => in_array($machine_name, $need_post_method) ? 'POST' : 'GET',
      'used' => array (
        'all'
      )
    ),
    'BPE_Invoice' => array(
      '#type' => 'hidden',
      '#value' => buckaroo_create_invoice(),
      'used' => array (
        'all'
      )
    ),
  );

  foreach ($elements as $key => $element) {
    if (in_array($machine_name, $element['used']) || in_array('all', $element['used'])) {
      unset($element['used']);
      $return[$key] = $element;
    }
  }
  //dsm(get_defined_vars());
  return $return;
}
